<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>STT Web Interface</title>
    <style>
        :root {
            --bg-color: #1a1a1a;
            --container-bg: #2d2d2d;
            --text-color: #e0e0e0;
            --border-color: #404040;
            --input-bg: #3d3d3d;
            --button-bg: #007bff;
            --button-hover: #0056b3;
            --code-bg: #000000;
        }

        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--bg-color);
            color: var(--text-color);
        }
        .container {
            background-color: var(--container-bg);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        .section {
            margin-bottom: 20px;
            padding: 20px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
        }
        h1 {
            color: var(--text-color);
            text-align: center;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: var(--text-color);
        }
        textarea, select, input[type="file"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            box-sizing: border-box;
            background-color: var(--input-bg);
            color: var(--text-color);
        }
        button {
            background-color: var(--button-bg);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: var(--button-hover);
        }
        .result {
            margin-top: 20px;
            padding: 20px;
            background-color: var(--container-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
        }
        #loading {
            display: none;
            text-align: center;
            margin: 20px 0;
            color: var(--text-color);
        }
        .tab {
            overflow: hidden;
            border: 1px solid var(--border-color);
            background-color: var(--input-bg);
            border-radius: 4px 4px 0 0;
        }
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            color: var(--text-color);
        }
        .tab button:hover {
            background-color: var(--container-bg);
        }
        .tab button.active {
            background-color: var(--button-bg);
            color: white;
        }
        .tabcontent {
            display: none;
            padding: 20px;
            border: 1px solid var(--border-color);
            border-top: none;
            border-radius: 0 0 4px 4px;
        }
        .error {
            color: #ff4444;
            margin-top: 10px;
            padding: 10px;
            border: 1px solid #ff4444;
            border-radius: 4px;
            display: none;
        }
        .api-example {
            margin-top: 20px;
            padding: 20px;
            background-color: var(--code-bg);
            border-radius: 4px;
            border: 1px solid var(--border-color);
        }
        .api-example pre {
            margin: 0;
            white-space: pre-wrap;
            word-wrap: break-word;
            color: #00ff00;
        }
        .api-example h3 {
            color: var(--text-color);
            margin-top: 0;
        }
        .copy-button {
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 5px 10px;
            margin-top: 10px;
            cursor: pointer;
        }
        .copy-button:hover {
            background-color: var(--container-bg);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>STT Web Interface</h1>
        
        <div class="tab">
            <button class="tablinks active" onclick="openMode(event, 'uploadMode')">File Upload</button>
            <button class="tablinks" onclick="openMode(event, 'recordMode')">Record Audio</button>
        </div>
        
        <div id="uploadMode" class="tabcontent" style="display: block;">
            <div class="section">
                <label for="audioFile">Upload Audio File (WAV, MP3, etc.):</label>
                <div style="display: flex; align-items: center; gap: 10px;">
                    <div style="flex-grow: 1; position: relative;">
                        <input type="file" id="audioFile" accept="audio/*" onchange="updateApiExample()">
                        <button
                            onclick="clearFileInput(event)"
                            style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%);
                                   background: var(--input-bg); border: none; color: var(--text-color);
                                   padding: 4px 8px; border-radius: 4px; cursor: pointer;
                                   display: none; transition: background-color 0.2s;"
                            id="clearFileButton"
                            title="Clear file selection"
                            onmouseover="this.style.backgroundColor = 'var(--container-bg)'"
                            onmouseout="this.style.backgroundColor = 'var(--input-bg)'">
                            ✕
                        </button>
                    </div>
                </div>
                <button onclick="transcribeFile()">Transcribe Audio</button>
            </div>
        </div>
        
        <div id="recordMode" class="tabcontent">
            <div class="section">
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                    <button id="recordButton" onclick="toggleRecording()" style="background-color: var(--button-bg); flex: 1;">
                        🎤 Record Audio
                    </button>
                    <div style="text-align: center; flex: 1; display: none;" id="recordingStatus">
                        Recording... <span id="recordingTime">0:00</span>
                        <div style="width: 100%; height: 4px; background: var(--border-color); margin-top: 5px;">
                            <div id="recordingIndicator" style="width: 0%; height: 100%; background: var(--button-bg); transition: width 0.1s;"></div>
                        </div>
                    </div>
                </div>
                <div id="recordingPreview" style="display: none; margin-bottom: 10px;">
                    <audio id="recordedAudio" controls style="width: 100%; margin-bottom: 5px;"></audio>
                    <div style="display: flex; gap: 10px;">
                        <button onclick="transcribeRecording()" style="flex: 1; background-color: #28a745;">Transcribe Recording</button>
                        <button onclick="discardRecording()" style="flex: 1; background-color: #dc3545;">Discard</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="loading">
            Transcribing audio... Please wait...
        </div>

        <div id="error" class="error"></div>

        <div id="result" class="result" style="display: none;">
            <label for="transcription">Transcription:</label>
            <textarea id="transcription" rows="6" readonly></textarea>
            <div style="margin-top: 10px;">
                <strong>Detected Language:</strong> <span id="detectedLanguage"></span>
                <br>
                <strong>Confidence:</strong> <span id="languageConfidence"></span>
            </div>
        </div>

        <div class="api-example">
            <h3>API Example</h3>
            <pre id="apiExample">// Select a mode and prepare audio to see the API example</pre>
            <button class="copy-button" onclick="copyApiExample()">Copy to Clipboard</button>
        </div>
    </div>

    <script>
        function openMode(evt, modeName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(modeName).style.display = "block";
            evt.currentTarget.className += " active";
            
            // Update API example based on mode
            if (modeName === 'recordMode') {
                updateRecordApiExample();
            } else {
                updateApiExample();
            }
        }
        
        function updateApiExample() {
            const example =
        `# Python example using requests library
        import requests
        import warnings
        warnings.filterwarnings('ignore') # For self-signed certificate
        
        url = "https://localhost:8000/transcribe"
        files = {
        'audio': ('audio.wav', open('audio.wav', 'rb'))
        }
        
        response = requests.post(url, files=files, verify=False)  # verify=False for self-signed cert
        result = response.json()
        print(f"Transcription: {result['text']}")
        print(f"Language: {result['language']}")
        print(f"Confidence: {result['language_probability']}")
        
        # cURL example
        curl -X POST --insecure "https://localhost:8000/transcribe" \\
        -F "audio=@audio.wav" \\
        --output result.json`;
            document.getElementById('apiExample').textContent = example;
        }
        
        function updateRecordApiExample() {
            const example =
        `# Python example using requests library
        import requests
        import warnings
        warnings.filterwarnings('ignore') # For self-signed certificate
        
        url = "https://localhost:8000/transcribe-blob"
        files = {
        'audio': ('recorded_audio.wav', open('recorded_audio.wav', 'rb'))
        }
        
        response = requests.post(url, files=files, verify=False)  # verify=False for self-signed cert
        result = response.json()
        print(f"Transcription: {result['text']}")
        print(f"Language: {result['language']}")
        print(f"Confidence: {result['language_probability']}")
        
        # cURL example
        curl -X POST --insecure "https://localhost:8000/transcribe-blob" \\
        -F "audio=@recorded_audio.wav" \\
        --output result.json`;
            document.getElementById('apiExample').textContent = example;
        }

        // Show/hide clear button based on file selection
        document.getElementById('audioFile').addEventListener('change', function() {
            const clearButton = document.getElementById('clearFileButton');
            clearButton.style.display = this.value ? 'block' : 'none';
        });

        // Clear file input and update UI
        function clearFileInput(event) {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }

            const fileInput = document.getElementById('audioFile');
            const clearButton = document.getElementById('clearFileButton');
            
            fileInput.value = '';
            clearButton.style.display = 'none';
            
            updateApiExample();
        }

        async function transcribeFile() {
            const fileInput = document.getElementById('audioFile');
            const loading = document.getElementById('loading');
            const result = document.getElementById('result');
            const error = document.getElementById('error');

            if (!fileInput.files[0]) {
                showError('Please select an audio file');
                return;
            }

            loading.style.display = 'block';
            result.style.display = 'none';
            error.style.display = 'none';

            const formData = new FormData();
            formData.append('audio', fileInput.files[0]);

            try {
                const response = await fetch('/transcribe', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Failed to transcribe audio');
                }

                const data = await response.json();
                displayResult(data);
            } catch (err) {
                showError(err.message);
            } finally {
                loading.style.display = 'none';
            }
        }

        // Recording variables
        let mediaRecorder = null;
        let recordedChunks = [];
        let recordingInterval = null;
        let startTime = null;

        async function setupRecorder() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                
                mediaRecorder.ondataavailable = (e) => {
                    if (e.data.size > 0) {
                        recordedChunks.push(e.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    const blob = new Blob(recordedChunks, { type: 'audio/wav' });
                    const audioURL = URL.createObjectURL(blob);
                    const recordedAudio = document.getElementById('recordedAudio');
                    recordedAudio.src = audioURL;
                    document.getElementById('recordingPreview').style.display = 'block';
                };

                return true;
            } catch (err) {
                showError('Microphone access denied or not available');
                return false;
            }
        }

        async function toggleRecording() {
            if (!mediaRecorder) {
                const setup = await setupRecorder();
                if (!setup) return;
            }

            if (mediaRecorder.state === 'inactive') {
                recordedChunks = [];
                mediaRecorder.start(10);
                document.getElementById('recordButton').style.backgroundColor = 'var(--button-hover)';
                document.getElementById('recordButton').textContent = '⏹ Stop Recording';
                document.getElementById('recordingStatus').style.display = 'block';
                document.getElementById('recordingPreview').style.display = 'none';
                
                startTime = Date.now();
                recordingInterval = setInterval(updateRecordingTime, 100);
            } else {
                mediaRecorder.stop();
                clearInterval(recordingInterval);
                document.getElementById('recordButton').style.backgroundColor = 'var(--button-bg)';
                document.getElementById('recordButton').textContent = '🎤 Record Audio';
                document.getElementById('recordingStatus').style.display = 'none';
            }
        }

        function updateRecordingTime() {
            const duration = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(duration / 60);
            const seconds = duration % 60;
            document.getElementById('recordingTime').textContent = 
                `${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            const indicator = document.getElementById('recordingIndicator');
            indicator.style.width = `${(duration % 2) * 100}%`;
        }

        async function transcribeRecording() {
            const loading = document.getElementById('loading');
            const result = document.getElementById('result');
            const error = document.getElementById('error');

            if (recordedChunks.length === 0) {
                showError('No recording available');
                return;
            }

            loading.style.display = 'block';
            result.style.display = 'none';
            error.style.display = 'none';

            const formData = new FormData();
            const blob = new Blob(recordedChunks, { type: 'audio/wav' });
            formData.append('audio', blob, 'recorded_audio.wav');

            try {
                const response = await fetch('/transcribe-blob', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Failed to transcribe recording');
                }

                const data = await response.json();
                displayResult(data);
            } catch (err) {
                showError(err.message);
            } finally {
                loading.style.display = 'none';
            }
        }

        function discardRecording() {
            recordedChunks = [];
            document.getElementById('recordingPreview').style.display = 'none';
            document.getElementById('recordedAudio').src = '';
        }

        function displayResult(data) {
            document.getElementById('transcription').value = data.text;
            document.getElementById('detectedLanguage').textContent = data.language;
            document.getElementById('languageConfidence').textContent = 
                `${(data.language_probability * 100).toFixed(2)}%`;
            document.getElementById('result').style.display = 'block';
        }

        function showError(message) {
            const error = document.getElementById('error');
            error.textContent = message;
            error.style.display = 'block';
        }

        function copyApiExample() {
            const example = document.getElementById('apiExample').textContent;
            navigator.clipboard.writeText(example).then(() => {
                const copyButton = document.querySelector('.copy-button');
                const originalText = copyButton.textContent;
                copyButton.textContent = 'Copied!';
                setTimeout(() => {
                    copyButton.textContent = originalText;
                }, 2000);
            });
        }

        // Initialize API example
        updateApiExample();
    </script>
</body>
</html>